
####################################################
# General stuff
####################################################

# Property

type ObjectPropertyInfo {
    # ID
    id: String
    # Human readable name
    displayName: String
    # Property description
    description: String
    # Property category (may be used if object has a lot of properties)
    category: String
    # Property data type (int, String, etc)
    dataType: String

    # Property value. Note: for some properties value reading may take a lot of time (e.g. RowCount for tables)
    value: Object

    # List of values this property can take. Makes sense only for enumerable properties
    validValues: [ Object ]
    # Default property value
    defaultValue: Object
    # Supported features (system, hidden, inherited, foreign, expensive, etc)
    features: [ String! ]!
    # Order position
    order: Int!
}

# Async types

type AsyncTaskInfo {
    id: String!
    name: String
    running: Boolean!

    status: String
    error: ServerError

    result: SQLExecuteInfo @deprecated # Deprecated. Use asyncSqlExecuteResults instead
    # Task result.
    # Can be some kind of identifier to obtain real result using another API function
    taskResult: Object
}

# Various server errors descriptor

type ServerError {
    message: String
    errorCode: String
    stackTrace: String
    causedBy: ServerError
}

type ServerMessage {
    time: String
    message: String
}

# Languages supported by server

type ServerLanguage {
    isoCode: String!
    displayName: String
    nativeName: String
}

type WebServiceConfig {
    id: String!
    name: String!
    description: String!
    bundleVersion: String!
}

type ServerConfig {
    name: String!
    version: String!

    anonymousAccessEnabled: Boolean
    authenticationEnabled: Boolean
    supportsCustomConnections: Boolean
    supportsConnectionBrowser: Boolean
    supportsWorkspaces: Boolean
    sessionExpireTime: Int
    localHostAddress: String

    configurationMode: Boolean
    developmentMode: Boolean

    supportedLanguages: [ ServerLanguage! ]!
    services: [ WebServiceConfig ]
    productConfiguration: Object!
    defaultNavigatorSettings: NavigatorSettings!
}

type SessionInfo {
    createTime: String!
    lastAccessTime: String!
    locale: String!

    cacheExpired: Boolean!

    serverMessages: [ ServerMessage ]
    connections: [ ConnectionInfo! ]!
}

####################################################
# Drivers and connections
####################################################

type DatabaseAuthModel {
    id: ID!
    displayName: String!
    description: String
    icon: String

    properties: [ObjectPropertyInfo!]!
}

type DriverInfo {
    id: ID!
    name: String
    description: String
    icon: String
    iconBig: String

    # Driver provider ID
    providerId: ID
    # Driver Java class name
    driverClassName: String
    defaultPort: String
    defaultDatabase: String
    defaultServer: String
    defaultUser: String
    sampleURL: String
    driverInfoURL: String
    driverPropertiesURL: String
    embedded: Boolean

    # this fields must be removed and be replaced by DriverAuthModel
    allowsEmptyPassword: Boolean @deprecated

    licenseRequired: Boolean
    license: String
    custom: Boolean
    # Driver score for ordering, biggest first
    promotedScore: Int

    # Never used?
    connectionProperties: Object
    defaultConnectionProperties: Object

    # Driver properties.
    # Note: it is expensive property and it may produce database server roundtrips.
    # Call it only when you really need it.
    driverProperties: [ObjectPropertyInfo!]
    driverParameters: Object

    anonymousAccess: Boolean
    defaultAuthModel: ID!
    applicableAuthModel: [ID!]!
}

enum ResultDataFormat {
    resultset,
    document,
    graph,
    timeseries
}

# Connection instance
type ConnectionInfo {
    id: ID!
    driverId: ID!

    name: String!
    description: String

    host: String
    port: String
    databaseName: String
    url: String

    properties: Object

    template: Boolean!
    connected: Boolean!
    provided: Boolean!
    readOnly: Boolean!
    useUrl: Boolean!
    saveCredentials: Boolean!

    connectTime: String
    connectionError: ServerError
    serverVersion: String
    clientVersion: String

    origin: ObjectOrigin!

    authNeeded: Boolean!
    authModel: ID
    authProperties: [ObjectPropertyInfo!]!

    # Supported features (provided etc)
    features: [ String! ]!
    navigatorSettings: NavigatorSettings!
    supportedDataFormats: [ ResultDataFormat! ]!
}

type ObjectOrigin {
    type: ID!
    subType: ID
    displayName: String!
    icon: String
    configuration: Object
    details: [ObjectPropertyInfo!]
}

# Configuration of particular connection. Used for new connection create. Includes auth info
input ConnectionConfig {
    # used only for testing created connection
    connectionId: String
    name: String
    description: String

    # ID of template connection
    templateId: ID
    # ID of database driver
    driverId: ID

    # Custom connection parameters (all optional)

    host: String
    port: String
    databaseName: String
    # Connection url jdbc:{driver}://{host}[:{port}]/[{database}]
    url: String
    # Properties
    properties: Object

    # Template connection
    template: Boolean
    # Read-onyl connection
    readOnly: Boolean

    # User credentials

    saveCredentials: Boolean
    authModelId: ID
    credentials: Object

    #### deprecated fields

    # ID of predefined datasource
    dataSourceId: ID

    # Direct user credentials
    userName: String # @deprecated
    userPassword: String # deprecated
}

type NavigatorSettings {
    showSystemObjects: Boolean!
    showUtilityObjects: Boolean!
    showOnlyEntities: Boolean!
    mergeEntities: Boolean!
    hideFolders: Boolean!
    hideSchemas: Boolean!
    hideVirtualModel: Boolean!
}

input NavigatorSettingsInput {
    showSystemObjects: Boolean!
    showUtilityObjects: Boolean!
    showOnlyEntities: Boolean!
    mergeEntities: Boolean!
    hideFolders: Boolean!
    hideSchemas: Boolean!
    hideVirtualModel: Boolean!
}

type LogEntry {
    time: DateTime
    type: String!
    message: String
    stackTrace: String
}

####################################################
# Main API
####################################################

extend type Query {
    # Returns server config
    serverConfig: ServerConfig!

    # Returns session state ( initialize if not )
    sessionState: SessionInfo!

    # Session permissions
    sessionPermissions: [ID]!

    # Get driver info
    driverList( id: ID ): [ DriverInfo! ]!

    # List of template connections.
    templateConnections: [ ConnectionInfo! ]!

    authModels: [DatabaseAuthModel!]!

    # Return connection state
    connectionState( id: ID! ): ConnectionInfo! @deprecated

    # Return connection info
    connectionInfo( id: ID! ): ConnectionInfo!

    readSessionLog(maxEntries: Int, clearEntries: Boolean): [ LogEntry! ]!
}

extend type Mutation {
    # Initialize session
    openSession: SessionInfo!

    # Destroy session
    closeSession: Boolean

    # Refreshes session on server and returns its state
    touchSession: Boolean

    # Refresh session connection list
    refreshSessionConnections: Boolean

    # Refreshes session on server and returns its state
    changeSessionLanguage(locale: String): Boolean

    # Create new custom connection. Custom connections exist only within the current session.
    createConnection( config: ConnectionConfig! ): ConnectionInfo!

    createConnectionFromTemplate( templateId: ID! ): ConnectionInfo!

    # Copies connection configuration from node
    copyConnectionFromNode( nodePath: String! ): ConnectionInfo!

    # Test connection configuration. Returns remote server version
    testConnection( config: ConnectionConfig! ): ConnectionInfo!

    # Initiate existing connection
    initConnection( id: ID!, credentials: Object, saveCredentials: Boolean ): ConnectionInfo!

    # Disconnect from database
    closeConnection( id: ID! ): ConnectionInfo!

    # Remove connection and disconnects from the database if needed
    deleteConnection( id: ID! ): Boolean!

    # Changes navigator settings for connection
    setConnectionNavigatorSettings( id: ID!, settings: NavigatorSettingsInput!): Boolean!

    #### Generic async functions

    asyncTaskCancel(id: String!): Boolean

    asyncTaskInfo(id: String!, removeOnFinish: Boolean!): AsyncTaskInfo!


    #### Deprecated API

    # Create connection from template. Use createConnection instead
    openConnection( config: ConnectionConfig! ): ConnectionInfo! @deprecated

    # Use asyncTaskInfo instead
    asyncTaskStatus(id: String!): AsyncTaskInfo! @deprecated

}

